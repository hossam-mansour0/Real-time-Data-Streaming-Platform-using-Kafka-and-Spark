version: '3.8'

services:
  # 1. Zookeeper: Required by Kafka for cluster management.
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    networks:
      - analytics-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # 2. Kafka: The message broker for our data pipeline.
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - analytics-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" 
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # 3. PostgreSQL: For storing relational metadata (e.g., product info, store info).
  postgres:
    image: postgres:15
    container_name: postgres
    networks:
      - analytics-net
    environment:
      POSTGRES_DB: retail
      POSTGRES_USER: retail_user
      POSTGRES_PASSWORD: retail_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_PROXY_X_HOST_COUNT: 1
      PGADMIN_CONFIG_PROXY_X_PREFIX_COUNT: 1
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - analytics-net
# 4. MinIO: S3-compatible object storage for our data lake (Bronze/Silver layers).
  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - analytics-net
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API Port
      - "9001:9001"  # Console UI Port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data

  # 5. Redis: In-memory store for real-time aggregated metrics and dashboards.
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - analytics-net
    ports:
      - "6379:6379"

  # 6. Spark Master: Coordinates the Spark cluster.
  spark-master:
    build:
      context: ./app  
      dockerfile: Dockerfile
    container_name: spark-master
    networks:
      - analytics-net
    environment:
      - SPARK_MODE=master
    ports:
      - "8081:8080" 
      - "7077:7077"
    volumes:
      - ./app:/opt/bitnami/spark/app

  spark-worker:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: spark-worker
    networks:
      - analytics-net
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    volumes:
      - ./app:/opt/bitnami/spark/app

# A utility service to easily run the Python data producer.
  producer:
    build:
      context: ./data_producer
      dockerfile: Dockerfile
    container_name: producer
    networks:
      - analytics-net
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: "kafka:29092" 
    command: tail -f /dev/null

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    networks:
      - analytics-net
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    volumes:
      - metabase_data:/metabase-data
  
networks:
  analytics-net:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  pgadmin_data:
  metabase_data:


    